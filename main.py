# main.py
import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes
import chess

# Logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Load token
TOKEN = os.getenv("BOT_TOKEN")  # ensure BOT_TOKEN is set in Pella env

# In-memory games per chat
GAMES = {}  # chat_id -> chess.Board()

# Helpers
def board_to_text(board: chess.Board) -> str:
    """
    Return a unicode board plus info (turn, castling, legal moves count).
    """
    b = board.unicode(borders=True)
    turn = "Tr·∫Øng" if board.turn == chess.WHITE else "ƒêen"
    info = f"\n\nL∆∞·ª£t: {turn}\nƒê√£ ƒëi: {board.fullmove_number}\nTr·∫°ng th√°i: {'H·∫øt c·ªù' if board.is_game_over() else 'ƒêang ch∆°i'}"
    if board.is_check():
        info += "\n(Chi·∫øu!)"
    if board.is_game_over():
        result = "H√≤a" if board.is_stalemate() or board.is_insufficient_material() or board.is_seventyfive_moves() else "Th·∫Øng"
        info += f"\nK·∫øt qu·∫£: {result}"
    return b + info

# Commands
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "Nh√† ph√°t tri·ªÉn: T√¥ Minh ƒêi·ªÅm. vui l√≤ng b·∫•m /chess. ƒë·ªÉ ch∆°i"
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üéÆ B·∫Øt ƒë·∫ßu ch∆°i ( /chess )", callback_data="start_chess")]])
    await update.message.reply_text(text, reply_markup=kb)

async def chess_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    board = chess.Board()
    GAMES[chat_id] = board
    await update.message.reply_text("V√°n c·ªù m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o! D√πng l·ªánh /move ƒë·ªÉ ƒëi qu√¢n.\n\nV√≠ d·ª•: /move e2e4  ho·∫∑c  /move Nf3\n\nC√°c l·ªánh: /board /move /resign /help")
    await update.message.reply_text(board_to_text(board))

async def move_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in GAMES:
        await update.message.reply_text("Ch∆∞a c√≥ v√°n c·ªù. B·∫•m /chess ƒë·ªÉ b·∫Øt ƒë·∫ßu v√°n m·ªõi.")
        return

    board = GAMES[chat_id]
    if board.is_game_over():
        await update.message.reply_text("V√°n n√†y ƒë√£ k·∫øt th√∫c. D√πng /chess ƒë·ªÉ t·∫°o v√°n m·ªõi.")
        return

    if not context.args:
        await update.message.reply_text("C√∫ ph√°p: /move <c√∫ ph√°p ƒëi>\nV√≠ d·ª•: /move e2e4 ho·∫∑c /move Nf3")
        return

    move_text = context.args[0].strip()
    move = None

    # Try UCI first (e2e4, g1f3, e7e8q)
    try:
        move = chess.Move.from_uci(move_text)
        if move not in board.legal_moves:
            move = None
    except Exception:
        move = None

    # If UCI failed, try SAN (Nf3, O-O, etc.)
    if move is None:
        try:
            move = board.parse_san(move_text)
        except Exception:
            move = None

    if move is None:
        await update.message.reply_text("N√©t ƒëi kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ph·∫£i c√∫ ph√°p UCI/SAN. Th·ª≠ l·∫°i.\nV√≠ d·ª• h·ª£p l·ªá: e2e4  ho·∫∑c  Nf3  ho·∫∑c  O-O")
        return

    board.push(move)
    # After move, show board and status
    await update.message.reply_text(f"B·∫°n ƒëi: {move.uci()}")
    await update.message.reply_text(board_to_text(board))

    if board.is_game_over():
        outcome = "H√≤a" if board.is_stalemate() else "K·∫øt th√∫c"
        await update.message.reply_text(f"V√°n ƒë√£ k·∫øt th√∫c. K·∫øt qu·∫£: {board.result()} ({outcome})\nD√πng /chess ƒë·ªÉ b·∫Øt ƒë·∫ßu v√°n m·ªõi.")
        # Optionally delete game to force new start
        # del GAMES[chat_id]

async def board_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in GAMES:
        await update.message.reply_text("Ch∆∞a c√≥ v√°n c·ªù. B·∫•m /chess ƒë·ªÉ b·∫Øt ƒë·∫ßu v√°n m·ªõi.")
        return
    board = GAMES[chat_id]
    await update.message.reply_text(board_to_text(board))

async def resign_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in GAMES:
        await update.message.reply_text("Ch∆∞a c√≥ v√°n c·ªù ƒë·ªÉ ch·ªãu thua.")
        return
    del GAMES[chat_id]
    await update.message.reply_text("B·∫°n ƒë√£ ch·ªãu thua. V√°n c·ªù ƒë√£ b·ªã x√≥a. D√πng /chess ƒë·ªÉ b·∫Øt ƒë·∫ßu v√°n m·ªõi.")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "H∆∞·ªõng d·∫´n ch∆°i bot c·ªù vua:\n\n"
        "/chess - T·∫°o v√°n c·ªù m·ªõi\n"
        "/move <ƒëi> - ƒêi m·ªôt n∆∞·ªõc. H·ªó tr·ª£ UCI (e2e4) ho·∫∑c SAN (Nf3)\n"
        "/board - Hi·ªÉn th·ªã b√†n c·ªù hi·ªán t·∫°i\n"
        "/resign - Ch·ªãu thua, x√≥a v√°n\n"
        "/help - Hi·ªán h∆∞·ªõng d·∫´n\n\n"
        "V√≠ d·ª•: /move e2e4  ho·∫∑c  /move Nf3"
    )
    await update.message.reply_text(text)

# Main
def main():
    if not TOKEN:
        logger.error("BOT_TOKEN ch∆∞a ƒë∆∞·ª£c ƒë·∫∑t. Vui l√≤ng set bi·∫øn m√¥i tr∆∞·ªùng BOT_TOKEN.")
        return

    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("chess", chess_cmd))
    app.add_handler(CommandHandler("move", move_cmd))
    app.add_handler(CommandHandler("board", board_cmd))
    app.add_handler(CommandHandler("resign", resign_cmd))
    app.add_handler(CommandHandler("help", help_cmd))

    logger.info("Bot c·ªù vua ƒëang ch·∫°y...")
    app.run_polling()

if __name__ == "__main__":
    main()
